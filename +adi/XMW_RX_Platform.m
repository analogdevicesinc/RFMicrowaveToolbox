% API to configure RF properties for 2-24GHx XMW RX Platform
%
% See https://wiki.analog.com/resources/eval/developer-kits/2to24ghz-mxfe-rf-front-end

classdef XMW_RX_Platform < adi.internal.ADF4371_fixed & ...
		adi.internal.ADF4371_tunable & ...
		adi.internal.ADMV8818_preselector & ...
		adi.internal.ADMV8818_img & ...
		adi.internal.ADRF5020_input & ...
		adi.internal.ADRF5020_if & ...
		adi.internal.ADRF5730 & ...
		adi.internal.ADRF5740 & ...
		matlabshared.libiio.base

	% Properties to set
	properties
		%% if_freq_MHz Intermediate Frequency in MHz
		% Frequency generated by RF front end and passed to MxFE for digitization
		if_freq_MHz = 4500
		%% input_mode Desired input mode
		% May be 0 (default input RF path through LNA) or 1 (input RF path through preselector BPF)
		input_mode = 0
		%% input_freq_MHz RF input frequency in MHz
		% Desired RF input frequency which automatically determines appropriate RF conversion path, tunable LO frequency and center frequency of BPFs
		input_freq_MHz = 4500
		%% input_mode_switch Input mode switch, may be 1 (through preselector filter) or 0 (through bypass LNA)
		% Control signal value to switch which selects appropriate path in Input Stage
		input_mode_switch = 1
		%% if_freq_range Intermediate frequency range, may be 1 (2-7 GHz) or 0 (7.1-24 GHz)
		% Control signal value to switch which selects appropriate RF conversion path in Intermediate Stage
		if_freq_range = 1
		%% input_attenuation_dB Decibel Attenuation value for Input Stage
		% Corresponds to attenuation of 0-22 dB (steps of 0.5) at Intermediate Stage
		input_attenuation_dB = 0
		%% if_attenuation_decimal Attenuation Decimal value (0-63) for Intermediate Stage
		% Corresponds to attenuation of 0-31.5 dB (steps of 2) at Intermediate Stage
		if_attenuation_decimal = 0
		%% img_bpf_freq_MHz Center frequency of image Band Pass Filter
		% Automatically sets 3dB low pass and 3dB high pass frequencies for 1000 MHz bandwidth around the center frequency
		img_bpf_freq_MHz = 4500
		%% preselector_bpf_freq_MHz Center frequency of preselector Band Pass Filter
		% Automatically sets 3dB low pass and 3dB high pass frequencies for 1000 MHz bandwidth around the center frequency
		preselector_bpf_freq_MHz = 4500
		%% fixed_pll_freq_MHz Fixed PLL frequency in MHz
		% LO Frequency generated by the Fixed PLL
		fixed_pll_freq_MHz = 18000
		%% tunable_pll_freq_MHz Tunable PLL frequency in MHz
		% LO Frequency generated by the Tunable PLL
		tunable_pll_freq_MHz = 16000
	end

	properties(Nontunable, Hidden)
		Timeout = Inf;
		kernelBuffersCount = 0;
		dataTypeStr = 'int16';
		phyDevName;
		iioDevPHY
		devName;
		SamplesPerFrame = 0;
	end

	properties (Hidden, Constant, Logical)
		ComplexData = false;
	end

	properties(Nontunable, Hidden, Constant)
		Type = 'Rx';
		channel_names = {''};
	end

	properties (Hidden, Nontunable, Access = protected)
		isOutput = true;
	end

	methods
		%% Constructor
		function obj = XMW_RX_Platform(varargin)
			coder.allowpcode('plain');
			obj = obj@matlabshared.libiio.base(varargin{:});
		end
		% Destructor
		function delete(obj)
		end
	end

	%% API Functions
	methods (Hidden, Access = protected)
		function setupImpl(obj)
			% Setup LibIIO
			setupLib(obj);
			% Initialize the pointers
			initPointers(obj);
			getContext(obj);
			setContextTimeout(obj);
			% Initialize all IIO devices
			setupInit(obj);
		end
		function [data,valid] = stepImpl(~)
			data = 0;
			valid = false;
		end
		function setupInit(obj)
			setupInit@adi.internal.ADF4371_fixed(obj, 'iio:device5');
			setupInit@adi.internal.ADF4371_tunable(obj, 'iio:device4');
			setupInit@adi.internal.ADMV8818_preselector(obj, 'iio:device2');
			setupInit@adi.internal.ADMV8818_img(obj, 'iio:device1');
			setupInit@adi.internal.ADRF5020_input(obj, 'iio:device6');
			setupInit@adi.internal.ADRF5020_if(obj, 'iio:device7');
			setupInit@adi.internal.ADRF5730(obj, 'iio:device8');
			setupInit@adi.internal.ADRF5740(obj, 'iio:device9');
		end
	end

	methods
		function result = get.input_mode(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.input_mode;
			end
		end

		function set.input_mode(obj, value)
			obj.input_mode = value;
			switch value
				case 0
					obj.input_mode_switch = 1;
				case 1
					obj.input_mode_switch = 0;
					if obj.preselector_bpf_freq_MHz ~= obj.input_freq_MHz
						obj.preselector_bpf_freq_MHz = obj.input_freq_MHz;
					end
				otherwise
					obj.input_mode_switch = 1;
			end
		end

		function result = get.input_freq_MHz(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.input_freq_MHz;
			end
		end

		function set.input_freq_MHz(obj, value)
			obj.input_freq_MHz = value;
			if obj.input_freq_MHz <= 7000
				obj.if_freq_range = 1;
				obj.tunable_pll_freq_MHz = obj.fixed_pll_freq_MHz - obj.input_freq_MHz + obj.if_freq_MHz;
			elseif obj.input_freq_MHz > 7000
				obj.if_freq_range = 0;
				obj.tunable_pll_freq_MHz = obj.input_freq_MHz + obj.if_freq_MHz;
			else
				obj.if_freq_range = 1;
				obj.tunable_pll_freq_MHz = obj.fixed_pll_freq_MHz - obj.input_freq_MHz +obj.if_freq_MHz;
			end
			if obj.input_mode == 1
				obj.preselector_bpf_freq_MHz = value;
			end
			obj.img_bpf_freq_MHz = value;
		end

		function result = get.input_mode_switch(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.ADRF5020_input_CtrlSignalValue;
			end
		end

		function set.input_mode_switch(obj, value)
			obj.ADRF5020_input_CtrlSignalValue = value;
		end

		function result = get.if_freq_range(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.ADRF5020_if_CtrlSignalValue;
			end
		end

		function set.if_freq_range(obj, value)
			obj.ADRF5020_if_CtrlSignalValue = value;
		end

		function result = get.preselector_bpf_freq_MHz(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.ADMV8818_preselector_BandPassCenterFrequency;
			end
		end

		function set.preselector_bpf_freq_MHz(obj, value)
			obj.ADMV8818_preselector_LowPass3dBFrequency = value + 500;
			obj.ADMV8818_preselector_HighPass3dBFrequency = value - 500;
			obj.ADMV8818_preselector_BandPassCenterFrequency = value;
		end

		function result = get.img_bpf_freq_MHz(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.ADMV8818_img_BandPassCenterFrequency;
			end
		end

		function set.img_bpf_freq_MHz(obj, value)
			obj.ADMV8818_img_LowPass3dBFrequency = value + 500;
			obj.ADMV8818_img_HighPass3dBFrequency = value - 500;
			obj.ADMV8818_img_BandPassCenterFrequency = value;
		end

		function result = get.if_attenuation_decimal(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.GPIOAttenuationDecimal;
			end
		end

		function set.if_attenuation_decimal(obj, value)
			obj.GPIOAttenuationDecimal = value;
		end

		function result = get.input_attenuation_dB(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.GPIOAttenuationDecibel;
			end
		end

		function set.input_attenuation_dB(obj, value)
			obj.GPIOAttenuationDecibel = value;
		end

		function result = get.fixed_pll_freq_MHz(obj)
			result = false;

			if obj.ConnectedToDevice
				result = obj.ADF4371_fixed_Frequency/1000000;
			end
		end

		function set.fixed_pll_freq_MHz(obj, value)
			obj.ADF4371_fixed_Frequency = value*1000000;
		end

		function result = get.tunable_pll_freq_MHz(obj)
			result = false;
			if obj.ConnectedToDevice
				result = obj.ADF4371_tunable_Frequency/1000000;
			end
		end

		function set.tunable_pll_freq_MHz(obj, value)
			obj.ADF4371_tunable_Frequency = value*1000000;
		end
	end

	%% External Dependency Methods
	methods (Hidden, Static)
		function tf = isSupportedContext(bldCfg)
			tf = matlabshared.libiio.ExternalDependency.isSupportedContext(bldCfg);
		end
		function updateBuildInfo(buildInfo, bldCfg)
			% Call the matlabshared.libiio.method first
			matlabshared.libiio.ExternalDependency.updateBuildInfo(buildInfo, bldCfg);
		end
	end
end